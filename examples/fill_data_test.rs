use std::time::Duration;
use fltk::{app, window};
use fltk::enums::{Color, Font};
use fltk::image::SharedImage;
use fltk::prelude::{GroupExt, ImageExt, WidgetExt, WindowExt};
use log::debug;
use fltkrs_richdisplay::rich_reviewer::RichReviewer;
use fltkrs_richdisplay::UserData;

pub enum GlobalMessage {
    FillData,
    Clear,
    AfterClear
}

#[tokio::main]
async fn main() {
    simple_logger::init_with_level(log::Level::Debug).unwrap();
    let app = app::App::default();
    let mut win = window::Window::default()
        .with_size(1800, 1000)
        .with_label("rich-display fill data example")
        .center_screen();
    win.make_resizable(true);

    let mut reviewer = RichReviewer::new(100, 60, 1600, 800, None).history_mode();
    // reviewer.set_background_color(Color::Black);

    win.end();
    win.show();

    let mut data_buffer = Vec::<UserData>::new();
    let (global_sender, global_receiver) = app::channel::<GlobalMessage>();

    let img1 = SharedImage::load("res/1.jpg").unwrap();
    let (img1_width, img1_height, img1_data) = (img1.width(), img1.height(), img1.to_rgb_data());
    let img2 = SharedImage::load("res/2.jpg").unwrap();
    let (img2_width, img2_height, img2_data) = (img2.width(), img2.height(), img2.to_rgb_data());
    for i in 0..10 {
        let turn = i * 13;
        let mut data: Vec<UserData> = Vec::from([
            UserData::new_text(format!("{}ÂÆâÂÖ®Âπ∂‰∏îÈ´òÊïàÂú∞Â§ÑÁêÜùÑûÂπ∂ÂèëÁºñÁ®ãÊòØRustÁöÑÂè¶‰∏Ä‰∏™‰∏ªË¶ÅÁõÆÊ†á„ÄÇüíñÂπ∂ÂèëÁºñÁ®ãÂíåÂπ∂Ë°åÁºñÁ®ãËøô‰∏§ÁßçÊ¶ÇÂøµÈöèÁùÄËÆ°ÁÆóÊú∫ËÆæÂ§áÁöÑÂ§öÊ†∏a‰ºòÂåñËÄåÂèòÂæóË∂äÊù•Ë∂äÈáçË¶Å„ÄÇÂπ∂ÂèëÁºñÁ®ãüêâÂÖÅËÆ∏Á®ãÂ∫è‰∏≠ÁöÑ‰∏çÂêåÈÉ®ÂàÜÁõ∏‰∫íÁã¨Á´ãÂú∞ËøêË°åÔºõÂπ∂Ë°åÁºñÁ®ãÂàôÂÖÅËÆ∏Á®ãÂ∫è‰∏≠‰∏çÂêåÈÉ®ÂàÜÂêåÊó∂ÊâßË°å„ÄÇ", turn + 1)).set_underline(true).set_font(Font::Helvetica, 38).set_bg_color(Some(Color::DarkYellow)).set_clickable(true),
            UserData::new_text(format!("{}Âú®Â§ßÈÉ®ÂàÜÁé∞Âú®Êìç‰ΩúÁ≥ªÁªü‰∏≠ÔºåÊâßË°åÁ®ãÂ∫èÁöÑ‰ª£Á†Å‰ºöËøêË°åÂú®ËøõÁ®ã‰∏≠ÔºåÊìç‰ΩúÁ≥ªÁªü‰ºöÂêåÊó∂ÁÆ°ÁêÜÂ§ö‰∏™ËøõÁ®ã„ÄÇÁ±ª‰ººÂú∞ÔºåÁ®ãÂ∫èÂÜÖÈÉ®‰πüÂèØ‰ª•Êã•ÊúâÂ§ö‰∏™ÂêåÊó∂ËøêË°åÁöÑÁã¨Á´ãÈÉ®ÂàÜÔºåÁî®Êù•ËøêË°åËøô‰∫õÁã¨Á´ãÈÉ®ÂàÜÁöÑÂ∞±Âè´ÂÅöÁ∫øÁ®ã„ÄÇ", turn + 2)).set_font(Font::HelveticaItalic, 18).set_bg_color(Some(Color::Green)),
            UserData::new_image(img1_data.clone(), img1_width, img1_height),
            UserData::new_text(format!("{}Áî±‰∫éÂ§öÁ∫øÁ®ãÂèØ‰ª•ÂêåÊó∂ËøêË°åÔºåüêâÊâÄ‰ª•Â∞ÜËÆ°ÁÆóÊìç‰ΩúÊãÜÂàÜËá≥Â§ö‰∏™Á∫øÁ®ãÂèØ‰ª•ÊèêÈ´òÊÄßËÉΩ„ÄÇa‰ΩÜÊòØËøô‰πüÂ¢ûÂä†‰∫ÜÁ®ãÂ∫èÁöÑÂ§çÊùÇÂ∫¶ÔºåÂõ†‰∏∫‰∏çÂêåÁ∫øÁ®ãÁöÑÊâßË°åÈ°∫Â∫èÊòØÊó†Ê≥ïÁ°ÆÂÆöÁöÑ„ÄÇ\r\n", turn + 3)).set_fg_color(Color::Red).set_bg_color(Some(Color::Green)).set_underline(true),
            UserData::new_text(format!("{}Áî±‰∫éÂ§öÁ∫øÁ®ãÂèØ‰ª•ÂêåÊó∂ËøêË°åÔºåÊâÄ‰ª•Â∞ÜËÆ°ÁÆóÊìç‰ΩúÊãÜÂàÜËá≥Â§ö‰∏™Á∫øÁ®ãÂèØ‰ª•ÊèêÈ´òÊÄßËÉΩ„ÄÇ‰ΩÜÊòØËøô‰πüÂ¢ûÂä†‰∫ÜÁ®ãÂ∫èÁöÑÂ§çÊùÇÂ∫¶ÔºåÂõ†‰∏∫‰∏çÂêåÁ∫øÁ®ãÁöÑÊâßË°åÈ°∫Â∫èÊòØÊó†Ê≥ïÁ°ÆÂÆöÁöÑ„ÄÇ\r\n", turn + 4)).set_fg_color(Color::Red).set_bg_color(Some(Color::Green)),
            UserData::new_text(format!("{}ÂÆâÂÖ®Âπ∂‰∏îÈ´òÊïàÂú∞Â§ÑÁêÜÂπ∂ÂèëÁºñÁ®ãÊòØRustÁöÑÂè¶‰∏Ä‰∏™‰∏ªË¶ÅÁõÆÊ†á„ÄÇÂπ∂ÂèëÁºñÁ®ãÂíåÂπ∂Ë°åÁºñÁ®ãËøô‰∏§ÁßçÊ¶ÇÂøµÈöèÁùÄËÆ°ÁÆóÊú∫ËÆæÂ§áÁöÑÂ§öÊ†∏‰ºòÂåñËÄåÂèòÂæóË∂äÊù•Ë∂äÈáçË¶Å„ÄÇÂπ∂ÂèëÁºñÁ®ãÂÖÅËÆ∏Á®ãÂ∫è‰∏≠ÁöÑ‰∏çÂêåÈÉ®ÂàÜÁõ∏‰∫íÁã¨Á´ãÂú∞ËøêË°åÔºõÂπ∂Ë°åÁºñÁ®ãÂàôÂÖÅËÆ∏Á®ãÂ∫è‰∏≠‰∏çÂêåÈÉ®ÂàÜÂêåÊó∂ÊâßË°å„ÄÇ\r\n", turn + 5)).set_font(Font::Helvetica, 9).set_underline(true).set_blink(true),
            UserData::new_text(format!("{}Âú®Â§ßÈÉ®ÂàÜÁé∞Âú®Êìç‰ΩúÁ≥ªÁªü‰∏≠ÔºåÊâßË°åÁ®ãÂ∫èÁöÑ‰ª£Á†Å‰ºöËøêË°åÂú®ËøõÁ®ã‰∏≠ÔºåÊìç‰ΩúÁ≥ªÁªü‰ºöÂêåÊó∂ÁÆ°ÁêÜÂ§ö‰∏™ËøõÁ®ãb„ÄÇÁ±ª‰ººÂú∞ÔºåùÑûÁ®ãÂ∫èÂÜÖÈÉ®‰πüÂèØ‰ª•Êã•ÊúâÂ§ö‰∏™ÂêåÊó∂ËøêË°åÁöÑÁã¨Á´ãÈÉ®ÂàÜÔºåÁî®Êù•ËøêË°åËøô‰∫õÁã¨Á´ãÈÉ®ÂàÜÁöÑÂ∞±Âè´ÂÅöÁ∫øÁ®ã„ÄÇ\r\n", turn + 6)).set_font(Font::Helvetica, 32),
            UserData::new_text(format!("{}Áî±‰∫éÂ§öÁ∫øÁ®ãÂèØ‰ª•ÂêåÊó∂ËøêË°åÔºåÊâÄ‰ª•Â∞ÜËÆ°ÁÆóÊìç‰ΩúÊãÜÂàÜËá≥Â§ö‰∏™Á∫øÁ®ãÂèØ‰ª•ÊèêÈ´òÊÄßËÉΩ„ÄÇa‰ΩÜÊòØËøô‰πüÂ¢ûÂä†‰∫ÜÁ®ãÂ∫èÁöÑÂ§çÊùÇÂ∫¶ÔºåÂõ†‰∏∫‰∏çÂêåÁ∫øÁ®ãÁöÑÊâßË°åÈ°∫Â∫èÊòØÊó†Ê≥ïÁ°ÆÂÆöÁöÑ„ÄÇ\r\n", turn + 7)).set_fg_color(Color::Red).set_bg_color(Some(Color::Green)),
            UserData::new_text(format!("{}Áî±‰∫éÂ§öÁ∫øÁ®ãÂèØ‰ª•ÂêåÊó∂ËøêË°åÔºåÊâÄ‰ª•Â∞ÜËÆ°ÁÆóÊìç‰ΩúÊãÜÂàÜËá≥Â§ö‰∏™Á∫øÁ®ãÂèØ‰ª•ÊèêÈ´òÊÄßËÉΩ„ÄÇa‰ΩÜÊòØËøô‰πüÂ¢ûÂä†‰∫ÜÁ®ãÂ∫èÁöÑÂ§çÊùÇÂ∫¶ÔºåÂõ†‰∏∫‰∏çÂêåÁ∫øÁ®ãÁöÑÊâßË°åÈ°∫Â∫èÊòØÊó†Ê≥ïÁ°ÆÂÆöÁöÑ„ÄÇ\r\n", turn + 8)).set_fg_color(Color::Red).set_bg_color(Some(Color::Green)),
            UserData::new_image(img1_data.clone(), img1_width, img1_height).set_clickable(true),
            UserData::new_text(format!("{}ÂÆâÂÖ®Âπ∂‰∏îÈ´òÊïàÂú∞Â§ÑÁêÜÂπ∂ÂèëÁºñÁ®ãÊòØRustÁöÑÂè¶‰∏Ä‰∏™‰∏ªË¶ÅÁõÆÊ†á„ÄÇÂπ∂ÂèëÁºñÁ®ãÂíåÂπ∂Ë°åÁºñÁ®ãËøô‰∏§ÁßçÊ¶ÇÂøµÈöèÁùÄËÆ°ÁÆóÊú∫ËÆæÂ§áÁöÑÂ§öÊ†∏‰ºòÂåñËÄåÂèòÂæóË∂äÊù•Ë∂äÈáçË¶Å„ÄÇÂπ∂ÂèëÁºñÁ®ãÂÖÅËÆ∏Á®ãÂ∫è‰∏≠ÁöÑ‰∏çÂêåÈÉ®ÂàÜÁõ∏‰∫íÁã¨Á´ãÂú∞ËøêË°åÔºõÂπ∂Ë°åÁºñÁ®ãÂàôÂÖÅËÆ∏Á®ãÂ∫è‰∏≠‰∏çÂêåÈÉ®ÂàÜÂêåÊó∂ÊâßË°å„ÄÇ", turn + 9)).set_fg_color(Color::Yellow).set_bg_color(Some(Color::DarkBlue)),
            UserData::new_text(format!("{}Âú®Â§ßÈÉ®ÂàÜÁé∞Âú®Êìç‰ΩúÁ≥ªÁªü‰∏≠ÔºåÊâßË°åÁ®ãÂ∫èÁöÑ‰ª£Á†Å‰ºöËøêË°åÂú®ËøõÁ®ã‰∏≠ÔºåÊìç‰ΩúÁ≥ªÁªü‰ºöÂêåÊó∂ÁÆ°ÁêÜÂ§ö‰∏™ËøõÁ®ã„ÄÇÁ±ª‰ººÂú∞ÔºåÁ®ãÂ∫èÂÜÖÈÉ®‰πüÂèØ‰ª•Êã•ÊúâÂ§ö‰∏™ÂêåÊó∂ËøêË°åÁöÑÁã¨Á´ãÈÉ®ÂàÜÔºåÁî®Êù•ËøêË°åËøô‰∫õÁã¨Á´ãÈÉ®ÂàÜÁöÑÂ∞±Âè´ÂÅöÁ∫øÁ®ã„ÄÇ\r\n", turn + 10)).set_font(Font::HelveticaBold, 32).set_bg_color(Some(Color::Magenta)).set_clickable(true),
            UserData::new_text(format!("{}Áî±‰∫éÂ§öÁ∫øÁ®ãÂèØ‰ª•ÂêåÊó∂ËøêË°åÔºåÊâÄ‰ª•Â∞ÜËÆ°ÁÆóÊìç‰ΩúÊãÜÂàÜËá≥Â§ö‰∏™Á∫øÁ®ãÂèØ‰ª•ÊèêÈ´òÊÄßËÉΩ„ÄÇa‰ΩÜÊòØËøô‰πüÂ¢ûÂä†‰∫ÜÁ®ãÂ∫èÁöÑÂ§çÊùÇÂ∫¶ÔºåÂõ†‰∏∫‰∏çÂêåÁ∫øÁ®ãÁöÑÊâßË°åÈ°∫Â∫èÊòØÊó†Ê≥ïÁ°ÆÂÆöÁöÑ„ÄÇ\r\n", turn + 11)).set_fg_color(Color::Red).set_bg_color(Some(Color::Green)),
            UserData::new_text(format!("{}Áî±‰∫éÂ§öÁ∫øÁ®ãÂèØ‰ª•ÂêåÊó∂ËøêË°åÔºåÊâÄ‰ª•Â∞ÜËÆ°ÁÆóÊìç‰ΩúÊãÜÂàÜËá≥Â§ö‰∏™Á∫øÁ®ãÂèØ‰ª•ÊèêÈ´òÊÄßËÉΩ„ÄÇ", turn + 12)).set_fg_color(Color::Red).set_bg_color(Some(Color::Green)).set_clickable(true),
            UserData::new_text(format!("{}Áî±‰∫éÂ§öÁ∫øÁ®ãÂèØ‰ª•ÂêåÊó∂ËøêË°åÔºåüíñÊâÄ‰ª•Â∞ÜËÆ°ÁÆóÊìç‰ΩúÊãÜÂàÜËá≥Â§ö‰∏™Á∫øÁ®ãÂèØ‰ª•ÊèêÈ´òÊÄßËÉΩ„ÄÇ", turn + 13)).set_fg_color(Color::Cyan).set_font(Font::Courier, 18).set_clickable(true).set_blink(true),
            UserData::new_image(img2_data.clone(), img2_width, img2_height).set_clickable(true).set_blink(true),
        ]);
        data.reverse();
        while let Some(data_unit) = data.pop() {
            data_buffer.push(data_unit);
        }
    }

    // Ê®°Êãü‰∏äÂ±ÇÂ∫îÁî®Ë∞ÉÁî®
    tokio::spawn(async move {
        tokio::time::sleep(Duration::from_millis(100)).await;
        global_sender.send(GlobalMessage::FillData);
        debug!("Sender closed");

        tokio::time::sleep(Duration::from_secs(5)).await;
        global_sender.send(GlobalMessage::Clear);
        global_sender.send(GlobalMessage::AfterClear);
    });

    while app.wait() {
        if let Some(msg) = global_receiver.recv() {
            match msg {
                GlobalMessage::FillData => {
                    // Êõ¥Êñ∞Êï∞ÊçÆÊÆµÁä∂ÊÄÅ
                    reviewer.fill(&mut data_buffer);
                }
                GlobalMessage::Clear => {
                    // Ê∏ÖÁ©∫Êï∞ÊçÆÊÆµÁä∂ÊÄÅ
                    reviewer.clear();
                }
                GlobalMessage::AfterClear => {
                    let mut ud = vec![UserData::new_text(format!("--Â∑≤Ê∏ÖÂ±è--")).set_fg_color(Color::Light1).set_font(Font::Courier, 12)];
                    reviewer.fill(&mut ud);
                }
            }
        }

        app::sleep(0.001);
        app::awake();
    }
}